  group('Inkwell button building tests', () {
    testWidgets('To describe', (
      WidgetTester tester,
    ) async {
      const String audioPlayerSelectedPlaylistTitle = 'S8 audio';
      const String secondDownloadedAudioTitle =
          "L'argument anti-nuke qui m'inqui√®te le plus par Y.Rousselet";

      await IntegrationTestUtil.initializeApplicationAndSelectPlaylist(
        tester: tester,
        savedTestDataDirName: 'inkwell_button_test',
        selectedPlaylistTitle: audioPlayerSelectedPlaylistTitle,
      );

      // First, validate the play/pause button of the fully played
      // second downloaded Audio item InkWell widget and obtain
      // again the previously downloaded Audio item InkWell widget
      // finder

      Finder secondDownloadedAudioListTileInkWellFinder =
          IntegrationTestUtil.validateInkWellButton(
        tester: tester,
        audioTitle: secondDownloadedAudioTitle,
        expectedIcon: Icons.play_arrow,
        expectedIconColor:
            kSliderThumbColorInDarkMode, // Fully played audio item play icon color
        expectedIconBackgroundColor: Colors.black,
      );

      // Now we want to tap on the second downloaded audio of the
      // playlist in order to open the AudioPlayerView displaying
      // this fully played audio.

      // Tap on the InkWell to play the audio. Since the audio is fully
      // played, the audio remains at end.
      await tester.tap(secondDownloadedAudioListTileInkWellFinder);
      await tester.pumpAndSettle();





      // Find the slider using its key
      final sliderFinder = find.byKey(const Key('audioPlayerViewAudioSlider'));

      // Get the RenderBox of the slider
      final RenderBox sliderBox = tester.firstRenderObject(sliderFinder);

      // Calculate the position to tap on the slider
      final Offset sliderCenter =
          sliderBox.localToGlobal(sliderBox.size.center(Offset.zero));
      final double dx =
          sliderBox.size.width * 0.75; // 75% position on the slider
      final Offset tapPosition =
          Offset(sliderBox.localToGlobal(Offset.zero).dx + dx, sliderCenter.dy);

      // Simulate a tap at the specific position
      await tester.tapAt(tapPosition);

      // Trigger a frame
      await tester.pumpAndSettle();





      // Now we go back to the PlayListDownloadView in order
      // to tap on play/pause audio item InkWell to pause the
      // audio
      final audioPlayerNavButton =
          find.byKey(const ValueKey('playlistDownloadViewIconButton'));
      await tester.tap(audioPlayerNavButton);
      await tester.pumpAndSettle();

      // Again, validate the play/pause button of the previously
      // downloaded Audio item InkWell widget
      secondDownloadedAudioListTileInkWellFinder =
          secondDownloadedAudioListTileInkWellFinder =
              IntegrationTestUtil.validateInkWellButton(
        tester: tester,
        audioTitle: secondDownloadedAudioTitle,
        expectedIcon: Icons.pause,
        expectedIconColor: Colors.white,
        expectedIconBackgroundColor: kDarkAndLightEnabledIconColor,
      );

      // Purge the test playlist directory so that the created test
      // files are not uploaded to GitHub
      DirUtil.deleteFilesInDirAndSubDirs(
        rootPath: kPlaylistDownloadRootPathWindowsTest,
      );
    });
  });
